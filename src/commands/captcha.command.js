const { enableCaptcha, disableCaptcha, setCaptchaRole, setCaptchaChannel, getCaptchaRole, getCaptchaChannel, isCaptchaEnabled } = require(`../controllers/captcha.controller`);

module.exports = {
    name: `captcha`,
    description: `Permet de g√©rer le syst√®me Anti-Robot via captcha`,
    options: [
        {
            name: `enable`,
            type: `SUB_COMMAND`,
            description: `Activer le captcha`,
        },
        {
            name: `disable`,
            type: `SUB_COMMAND`,
            description: `D√©sactiver le captcha`
        },
        {
            name: `status`,
            type: `SUB_COMMAND`,
            description: `Voir le statut du syst√®me Anti-Robot via captcha`
        },
        {
            name: `settings`,
            type: `SUB_COMMAND`,
            description: `Modifier les param√®tres du captcha (salon, r√¥le)`,
            options: [
                {
                    name: `salon`,
                    type: `CHANNEL`,
                    description: `Salon o√π la v√©rification va avoir lieu`,
                    channelTypes: [`GUILD_TEXT`],
                    required: false
                },
                {
                    name: `role`,
                    type: `ROLE`,
                    description: `R√¥le √† attribuer lorsque la v√©rification est r√©ussite`,
                    required: false
                },
            ]
        },
    ],
    run: async (Discord, client, interaction, sender, guild) => {
        if (!sender.permissions.has(`ADMINISTRATOR`)) {
            return interaction.reply(`‚ùå **| \`Vous n'avez pas la permissions d'administrer le serveur !\`**`);
        }

        const guildId = guild.id;
        const subcommand = interaction.options.getSubcommand();

        if (subcommand === `enable`) {
            await enableCaptcha(guildId);

            return interaction.reply(`‚úÖ \`Le syst√®me de s√©curit√© Anti-Robot via captcha est d√©sormais activ√©\``);
        }

        if (subcommand === `disable`) {
            await disableCaptcha(guildId);

            return interaction.reply(`‚úÖ \`Le syst√®me de s√©curit√© Anti-Robot via captcha est d√©sormais d√©sactiv√©\``);
        }

        if (subcommand === `status`) {
            const captchaRole = await getCaptchaRole(guildId);
            const captchaChannel = await getCaptchaChannel(guildId);
            const isEnabled = await isCaptchaEnabled(guildId);

            let status = `‚úÖ Op√©rationnel`;

            if (!captchaChannel || !captchaRole) {
                status = `‚ö†Ô∏è Erreur`;
            }

            if (!isEnabled) {
                status = `üö´ D√©sactiv√©`;
            }

            return interaction.reply(`üõÉ **¬¶ __Statut du syst√®me de s√©curit√© Anti-Robot via captcha:__**\n\n        **‚Ä¢ Statut: ${status}**\n\n        **‚Ä¢ Activ√©: \`${isEnabled}\`**\n        **‚Ä¢ Salon: ${captchaChannel}**\n        **‚Ä¢ R√¥le: ${captchaRole}**`);
        }

        if (subcommand === `settings`) {
            const captchaRole = interaction.options.getRole(`role`);
            const captchaChannel = interaction.options.getChannel(`salon`);

            if (!captchaRole && !captchaChannel) {
                return interaction.reply(`‚ùå \`Merci d'indiquer le param√®tres √† modifier\``);
            }

            if (captchaRole) {
                await setCaptchaRole(guildId, captchaRole.id);
            }

            if (captchaChannel) {
                await setCaptchaChannel(guildId, captchaChannel.id);
            }

            return interaction.reply(`‚úÖ \`Les param√®tres du syst√®me de s√©curit√© Anti-Robot via captcha a √©t√© mis √† jour\``);
        }
    }
}